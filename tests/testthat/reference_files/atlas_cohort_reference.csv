"COHORT_DEFINITION_ID","ATLAS_ID","SQL_DEFINITION","DEFINITION","ATLAS_URL"
1,100,"","ewogImlkIjogICAgICAgIDEsCiJuYW1lIjogIkdhc3Ryb2ludGVzdGluYWwgaGVtb3JyaGFnZSBldmVudHMgIiwKImRlc2NyaXB0aW9uIjogbnVsbCwKImNyZWF0ZWRCeSI6ICIiLAoiY3JlYXRlZERhdGUiOiAiMjAxOS0xMC0wNyAxNjo0MCIsCiJtb2RpZmllZEJ5IjogIiIsCiJtb2RpZmllZERhdGUiOiAiMjAxOS0xMC0yNCAxODo0MyIsCiJleHByZXNzaW9uIjogewogIkNvbmNlcHRTZXRzIjogWwogewogImlkIjogICAgICAgIDAsCiJuYW1lIjogIkdhc3Ryb2ludGVzdGluYWwgaGVtb3JyaGFnZSIsCiJleHByZXNzaW9uIjogewogIml0ZW1zIjogWwogewogImNvbmNlcHQiOiB7CiAiQ09OQ0VQVF9DTEFTU19JRCI6ICJDbGluaWNhbCBGaW5kaW5nIiwKIkNPTkNFUFRfQ09ERSI6ICI0MTQ5OTIwMDAiLAoiQ09OQ0VQVF9JRCI6ICA0MjEyNDU2LAoiQ09OQ0VQVF9OQU1FIjogIlBhaW5sZXNzIHJlY3RhbCBibGVlZGluZyIsCiJET01BSU5fSUQiOiAiQ29uZGl0aW9uIiwKIklOVkFMSURfUkVBU09OIjogIlYiLAoiSU5WQUxJRF9SRUFTT05fQ0FQVElPTiI6ICJWYWxpZCIsCiJTVEFOREFSRF9DT05DRVBUIjogIlMiLAoiU1RBTkRBUkRfQ09OQ0VQVF9DQVBUSU9OIjogIlN0YW5kYXJkIiwKIlZPQ0FCVUxBUllfSUQiOiAiU05PTUVEIiAKfSwKImluY2x1ZGVEZXNjZW5kYW50cyI6IHRydWUgCn0sCnsKICJjb25jZXB0IjogewogIkNPTkNFUFRfQ0xBU1NfSUQiOiAiQ2xpbmljYWwgRmluZGluZyIsCiJDT05DRVBUX0NPREUiOiAiNzQ0NzQwMDMiLAoiQ09OQ0VQVF9JRCI6ICAgMTkyNjcxLAoiQ09OQ0VQVF9OQU1FIjogIkdhc3Ryb2ludGVzdGluYWwgaGVtb3JyaGFnZSIsCiJET01BSU5fSUQiOiAiQ29uZGl0aW9uIiwKIklOVkFMSURfUkVBU09OIjogIlYiLAoiSU5WQUxJRF9SRUFTT05fQ0FQVElPTiI6ICJWYWxpZCIsCiJTVEFOREFSRF9DT05DRVBUIjogIlMiLAoiU1RBTkRBUkRfQ09OQ0VQVF9DQVBUSU9OIjogIlN0YW5kYXJkIiwKIlZPQ0FCVUxBUllfSUQiOiAiU05PTUVEIiAKfSwKImluY2x1ZGVEZXNjZW5kYW50cyI6IHRydWUgCn0sCnsKICJjb25jZXB0IjogewogIkNPTkNFUFRfQ0xBU1NfSUQiOiAiQ2xpbmljYWwgRmluZGluZyIsCiJDT05DRVBUX0NPREUiOiAiNDE0OTkxMDA3IiwKIkNPTkNFUFRfSUQiOiAgNDE4OTc5MCwKIkNPTkNFUFRfTkFNRSI6ICJQYWluZnVsIHJlY3RhbCBibGVlZGluZyIsCiJET01BSU5fSUQiOiAiQ29uZGl0aW9uIiwKIklOVkFMSURfUkVBU09OIjogIlYiLAoiSU5WQUxJRF9SRUFTT05fQ0FQVElPTiI6ICJWYWxpZCIsCiJTVEFOREFSRF9DT05DRVBUIjogIlMiLAoiU1RBTkRBUkRfQ09OQ0VQVF9DQVBUSU9OIjogIlN0YW5kYXJkIiwKIlZPQ0FCVUxBUllfSUQiOiAiU05PTUVEIiAKfSwKImluY2x1ZGVEZXNjZW5kYW50cyI6IHRydWUgCn0sCnsKICJjb25jZXB0IjogewogIkNPTkNFUFRfQ0xBU1NfSUQiOiAiSUNEMTAgY29kZSIsCiJDT05DRVBUX0NPREUiOiAiSzI5LjAiLAoiQ09OQ0VQVF9JRCI6ICAxNDE2NzQxLAoiQ09OQ0VQVF9OQU1FIjogIkFjdXRlIGhhZW1vcnJoYWdpYyBnYXN0cml0aXMiLAoiRE9NQUlOX0lEIjogIkNvbmRpdGlvbiIsCiJJTlZBTElEX1JFQVNPTiI6ICJWIiwKIklOVkFMSURfUkVBU09OX0NBUFRJT04iOiAiVmFsaWQiLAoiU1RBTkRBUkRfQ09OQ0VQVCI6ICJOIiwKIlNUQU5EQVJEX0NPTkNFUFRfQ0FQVElPTiI6ICJOb24tU3RhbmRhcmQiLAoiVk9DQUJVTEFSWV9JRCI6ICJJQ0QxMENOIiAKfSwKImluY2x1ZGVEZXNjZW5kYW50cyI6IHRydWUgCn0sCnsKICJjb25jZXB0IjogewogIkNPTkNFUFRfQ0xBU1NfSUQiOiAiSUNEMTAgY29kZSIsCiJDT05DRVBUX0NPREUiOiAiSzkyLjAiLAoiQ09OQ0VQVF9JRCI6IDQuNTYwNTk2ZSswNywKIkNPTkNFUFRfTkFNRSI6ICJIYWVtYXRlbWVzaXMiLAoiRE9NQUlOX0lEIjogIkNvbmRpdGlvbiIsCiJJTlZBTElEX1JFQVNPTiI6ICJWIiwKIklOVkFMSURfUkVBU09OX0NBUFRJT04iOiAiVmFsaWQiLAoiU1RBTkRBUkRfQ09OQ0VQVCI6ICJOIiwKIlNUQU5EQVJEX0NPTkNFUFRfQ0FQVElPTiI6ICJOb24tU3RhbmRhcmQiLAoiVk9DQUJVTEFSWV9JRCI6ICJJQ0QxMCIgCn0sCiJpbmNsdWRlRGVzY2VuZGFudHMiOiB0cnVlIAp9IApdIAp9IAp9IApdLAoiUHJpbWFyeUNyaXRlcmlhIjogewogIkNyaXRlcmlhTGlzdCI6IFsKIHsKICJDb25kaXRpb25PY2N1cnJlbmNlIjogewogIkNvZGVzZXRJZCI6ICAgICAgICAwIAp9IAp9IApdLAoiT2JzZXJ2YXRpb25XaW5kb3ciOiB7CiAiUHJpb3JEYXlzIjogICAgICAgIDAsCiJQb3N0RGF5cyI6ICAgICAgICAwIAp9LAoiUHJpbWFyeUNyaXRlcmlhTGltaXQiOiB7CiAiVHlwZSI6ICJBbGwiIAp9IAp9LAoiUXVhbGlmaWVkTGltaXQiOiB7CiAiVHlwZSI6ICJGaXJzdCIgCn0sCiJFeHByZXNzaW9uTGltaXQiOiB7CiAiVHlwZSI6ICJBbGwiIAp9LAoiSW5jbHVzaW9uUnVsZXMiOiBbCiB7CiAibmFtZSI6ICJObyBHYXN0cm9pbnRlc3RpbmFsIEhlbW9ycmhhZ2UgZXZlbnRzIGluIHByaW9yIDMwIGRheXMiLAoiZXhwcmVzc2lvbiI6IHsKICJUeXBlIjogIkFMTCIsCiJDcml0ZXJpYUxpc3QiOiBbCiB7CiAiQ3JpdGVyaWEiOiB7CiAiQ29uZGl0aW9uT2NjdXJyZW5jZSI6IHsKICJDb2Rlc2V0SWQiOiAgICAgICAgMCAKfSAKfSwKIlN0YXJ0V2luZG93IjogewogIlN0YXJ0IjogewogIkRheXMiOiAgICAgICAzMCwKIkNvZWZmIjogICAgICAgLTEgCn0sCiJFbmQiOiB7CiAiRGF5cyI6ICAgICAgICAxLAoiQ29lZmYiOiAgICAgICAtMSAKfSwKIlVzZUV2ZW50RW5kIjogZmFsc2UgCn0sCiJJZ25vcmVPYnNlcnZhdGlvblBlcmlvZCI6IHRydWUsCiJPY2N1cnJlbmNlIjogewogIlR5cGUiOiAgICAgICAgMCwKIkNvdW50IjogICAgICAgIDAgCn0gCn0gCl0sCiJEZW1vZ3JhcGhpY0NyaXRlcmlhTGlzdCI6IFtdLAoiR3JvdXBzIjogW10gCn0gCn0gCl0sCiJFbmRTdHJhdGVneSI6IHsKICJEYXRlT2Zmc2V0IjogewogIkRhdGVGaWVsZCI6ICJFbmREYXRlIiwKIk9mZnNldCI6ICAgICAgIDI5IAp9IAp9LAoiQ2Vuc29yaW5nQ3JpdGVyaWEiOiBbXSwKIkNvbGxhcHNlU2V0dGluZ3MiOiB7CiAiQ29sbGFwc2VUeXBlIjogIkVSQSIsCiJFcmFQYWQiOiAgICAgICAgMCAKfSwKIkNlbnNvcldpbmRvdyI6IHt9LAoiY2RtVmVyc2lvblJhbmdlIjogIj49NS4wLjAiIAp9LAoiZXhwcmVzc2lvblR5cGUiOiAiU0lNUExFX0VYUFJFU1NJT04iIAp9","test_url.com"
2,101,"","ewogImlkIjogICAgICAxMjIsCiJuYW1lIjogImNlbGVjb3hpYiBleHBvc3VyZSIsCiJkZXNjcmlwdGlvbiI6IG51bGwsCiJjcmVhdGVkQnkiOiAiIiwKImNyZWF0ZWREYXRlIjogIjIwMTktMTAtMDcgMTY6NDAiLAoibW9kaWZpZWRCeSI6ICIiLAoibW9kaWZpZWREYXRlIjogIjIwMTktMTAtMjQgMTg6NDMiLAoiZXhwcmVzc2lvbiI6IHsKICJDb25jZXB0U2V0cyI6IFsKIHsKICJpZCI6ICAgICAgICAwLAoibmFtZSI6ICJjZWxlY294aWIiLAoiZXhwcmVzc2lvbiI6IHsKICJpdGVtcyI6IFsKIHsKICJjb25jZXB0IjogewogIkNPTkNFUFRfQ0xBU1NfSUQiOiAiSW5ncmVkaWVudCIsCiJDT05DRVBUX0NPREUiOiAiMTQwNTg3IiwKIkNPTkNFUFRfSUQiOiAgMTExODA4NCwKIkNPTkNFUFRfTkFNRSI6ICJjZWxlY294aWIiLAoiRE9NQUlOX0lEIjogIkRydWciLAoiSU5WQUxJRF9SRUFTT04iOiAiViIsCiJJTlZBTElEX1JFQVNPTl9DQVBUSU9OIjogIlZhbGlkIiwKIlNUQU5EQVJEX0NPTkNFUFQiOiAiUyIsCiJTVEFOREFSRF9DT05DRVBUX0NBUFRJT04iOiAiU3RhbmRhcmQiLAoiVk9DQUJVTEFSWV9JRCI6ICJSeE5vcm0iIAp9LAoiaW5jbHVkZURlc2NlbmRhbnRzIjogdHJ1ZSAKfSAKXSAKfSAKfSAKXSwKIlByaW1hcnlDcml0ZXJpYSI6IHsKICJDcml0ZXJpYUxpc3QiOiBbCiB7CiAiRHJ1Z0V4cG9zdXJlIjogewogIkNvZGVzZXRJZCI6ICAgICAgICAwIAp9IAp9IApdLAoiT2JzZXJ2YXRpb25XaW5kb3ciOiB7CiAiUHJpb3JEYXlzIjogICAgICAgIDAsCiJQb3N0RGF5cyI6ICAgICAgICAwIAp9LAoiUHJpbWFyeUNyaXRlcmlhTGltaXQiOiB7CiAiVHlwZSI6ICJBbGwiIAp9IAp9LAoiUXVhbGlmaWVkTGltaXQiOiB7CiAiVHlwZSI6ICJGaXJzdCIgCn0sCiJFeHByZXNzaW9uTGltaXQiOiB7CiAiVHlwZSI6ICJBbGwiIAp9LAoiSW5jbHVzaW9uUnVsZXMiOiBbXSwKIkVuZFN0cmF0ZWd5IjogewogIkN1c3RvbUVyYSI6IHsKICJEcnVnQ29kZXNldElkIjogICAgICAgIDAsCiJHYXBEYXlzIjogICAgICAgMzAsCiJPZmZzZXQiOiAgICAgICAgMCwKIkRheXNTdXBwbHlPdmVycmlkZSI6ICAgICAgIDMwIAp9IAp9LAoiQ2Vuc29yaW5nQ3JpdGVyaWEiOiBbXSwKIkNvbGxhcHNlU2V0dGluZ3MiOiB7CiAiQ29sbGFwc2VUeXBlIjogIkVSQSIsCiJFcmFQYWQiOiAgICAgICAgMCAKfSwKIkNlbnNvcldpbmRvdyI6IHt9LAoiY2RtVmVyc2lvblJhbmdlIjogIj49NS4wLjAiIAp9LAoiZXhwcmVzc2lvblR5cGUiOiAiU0lNUExFX0VYUFJFU1NJT04iIAp9","test_url.com"
